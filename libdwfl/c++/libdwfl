/* -*-c++-*-
   Copyright (C) 2009, 2010, 2011, 2012, 2014, 2015 Red Hat, Inc.
   This file is part of elfutils.

   This file is free software; you can redistribute it and/or modify
   it under the terms of either

     * the GNU Lesser General Public License as published by the Free
       Software Foundation; either version 3 of the License, or (at
       your option) any later version

   or

     * the GNU General Public License as published by the Free
       Software Foundation; either version 2 of the License, or (at
       your option) any later version

   or both in parallel, as here.

   elfutils is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received copies of the GNU General Public License and
   the GNU Lesser General Public License along with this program.  If
   not, see <http://www.gnu.org/licenses/>.  */

#ifndef _LIBDWFL_CPP
#define _LIBDWFL_CPP	1

#include <stdexcept>
#include <cassert>
#include <string>
#include <elfutils/libdwfl.h>

namespace elfutils
{
  // Helper functions.  Not for client consumption.
  namespace libdwfl_impl
  {
    inline void throw_libdwfl (int dwerr = 0);
  }

  // Given a Dwfl, iterates through its Dwfl_Module's.
  //
  // Example usage:
  // std::vector <Dwfl_Module *> mods (elfutils::dwfl_module_iterator (dwfl),
  //				       elfutils::dwfl_module_iterator::end ());

  class dwfl_module_iterator
    : public std::iterator <std::input_iterator_tag, Dwfl_Module *>
  {
    Dwfl *m_dwfl;
    ptrdiff_t m_offset;
    Dwfl_Module *m_module;

    static int
    module_cb (Dwfl_Module *mod, void **data, const char *name,
	       Dwarf_Addr addr, void *arg)
    {
      elfutils::dwfl_module_iterator *self
	= static_cast <elfutils::dwfl_module_iterator *> (arg);
      self->m_module = mod;
      return DWARF_CB_ABORT;
    }

    void
    move ()
    {
      m_offset = dwfl_getmodules (m_dwfl, module_cb, this, m_offset);
      if (m_offset == -1)
	elfutils::libdwfl_impl::throw_libdwfl ();
    }

    explicit dwfl_module_iterator (ptrdiff_t off)
      : m_dwfl (NULL)
      , m_offset (off)
    {}

  public:
    dwfl_module_iterator (Dwfl *dwfl)
      : m_dwfl (dwfl)
      , m_offset (0)
    {
      move ();
    }

    dwfl_module_iterator (const dwfl_module_iterator &that)
      : m_dwfl (that.m_dwfl)
      , m_offset (that.m_offset)
      , m_module (that.m_module)
    {}

    static dwfl_module_iterator
    end ()
    {
      return dwfl_module_iterator ((ptrdiff_t) 0);
    }

    dwfl_module_iterator &
    operator++ ()
    {
      assert (*this != end ());
      move ();
      return *this;
    }

    dwfl_module_iterator
    operator++ (int)
    {
      dwfl_module_iterator ret = *this;
      ++*this;
      return ret;
    }

    Dwfl_Module &
    operator* () const
    {
      return *m_module;
    }

    Dwfl_Module *
    operator-> () const
    {
      return &**this;
    }

    bool
    operator== (const dwfl_module_iterator &that) const
    {
      assert (m_dwfl == NULL || that.m_dwfl == NULL || m_dwfl == that.m_dwfl);
      return m_offset == that.m_offset;
    }

    bool
    operator!= (const dwfl_module_iterator &that) const
    {
      return !(*this == that);
    }
  };
}

inline void
elfutils::libdwfl_impl::throw_libdwfl (int dwerr)
{
  if (dwerr == 0)
    dwerr = dwfl_errno ();
  assert (dwerr != 0);
  throw std::runtime_error (dwfl_errmsg (dwerr));
}

#endif
